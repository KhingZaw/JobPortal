<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />

    <FormSection Title="Basic Details"
                 HelpText="This information is used to identify the job and can be searched to help hikers find it.">

        <FormFieldSet Width="col-6">
            <label for="jobName" class="font-weight-bold text-secondary">Name</label>
            <InputText @bind-Value="_job.Name" class="form-control" id="JobName" />
            <ValidationMessage For="@(() => _job.Name)" />
        </FormFieldSet>

        <FormFieldSet>
            <label for="jobDescription" class="font-weight-bold text-secondary">Description</label>
            <InputTextArea @bind-Value="_job.Description" rows="6" class="form-control" id="JobDescription" />
            <ValidationMessage For="@(() => _job.Description)" />
        </FormFieldSet>

        <FormFieldSet Width="col-6">
            <label for="jobLocation" class="font-weight-bold text-secondary">Location</label>
            <InputText @bind-Value="_job.Location" class="form-control" id="JobLocation" />
            <ValidationMessage For="@(() => _job.Location)" />
        </FormFieldSet>

        <FormFieldSet Width="col-6">
            <label for="jobImage" class="font-weight-bold text-secondary">Image</label>
            @if (string.IsNullOrWhiteSpace(_job.Image))
            {
                <InputFile OnChange="LoadJobsImage" class="form-control-file" id="JobImage" accept=".png,.jpg,.jpeg" />
            }
            else
            {
                <div class="card bg-dark text-white">
                    <img src="images/@_job.Image" />
                    <div class="card-img-overlay">
                        <button class="btn btn-primary btn-sm" @onclick="RemoveJobsImage">Remove</button>
                    </div>
                </div>
            }
        </FormFieldSet>

    </FormSection>

    <FormSection Title="Salary"
                 HelpText="Help other hikers out by telling them the salary of the job is how long it might take them.">

        <FormFieldSet Width="col-3">
            <label for="jobSalary" class="font-weight-bold text-secondary">Salary</label>
            <InputNumber @bind-Value="_job.Salary" class="form-control" id="JobSalary" />
            <ValidationMessage For="@(() => _job.Salary)" />
        </FormFieldSet>

      
    </FormSection>

    <FormSection Title="JobDescription"
                 HelpText="Job Description are a guide for the job. This helps hikers new to the job stay on track.">
        @{ var i = 0; }
        @foreach (var jobDescriptions in _job.JobDescriptions)
        {
            i++;
            jobDescriptions.Stage = i;

            <div class="row">
                <div class="col-2">
                    <div class="form-group">
                        <label class="font-weight-bold text-secondary">Stage</label>
                        <p>@jobDescriptions.Stage</p>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="jobDescriptionDescription" class="font-weight-bold text-secondary">Description</label>
                        <InputText @bind-Value="jobDescriptions.Descriptions" class="form-control" id="jobDescriptionDescription" />
                        <ValidationMessage For="@(() => jobDescriptions.Descriptions)" />
                    </div>
                </div>
                <div class="col-1 d-flex mt-3">
                    <button @onclick="@(() => _job.JobDescriptions.Remove(jobDescriptions))" class="btn btn-link" type="button">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                        </svg>
                    </button>
                </div>
            </div>
        }

        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary" type="button" @onclick="@(() => _job.JobDescriptions.Add(new JobsDto.JobDescription()))">Add Descriptions</button>
                <ValidationMessage For="@(() => _job.JobDescriptions)" />
            </div>
        </div>
    </FormSection>

    <FormSection Title="JobRequirement"
                 HelpText="Job Reuirement are a guide for the job. This helps hikers new to the job stay on track.">
        @{
            var i = 0;
        }
        @foreach (var jobRequirements in _job.JobRequirements)
        {
            i++;
            jobRequirements.Stage = i;

            <div class="row">
                <div class="col-2">
                    <div class="form-group">
                        <label class="font-weight-bold text-secondary">Stage</label>
                        <p>@jobRequirements.Stage</p>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="jobRequirementRequirement" class="font-weight-bold text-secondary">Requirement</label>
                        <InputText @bind-Value="jobRequirements.Requirement" class="form-control" id="jobRequirementRequirement" />
                        <ValidationMessage For="@(() => jobRequirements.Requirement)" />
                    </div>
                </div>
                <div class="col-1 d-flex mt-3">
                    <button @onclick="@(() => _job.JobRequirements.Remove(jobRequirements))" class="btn btn-link" type="button">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                        </svg>
                    </button>
                </div>
            </div>
        }

        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary" type="button" @onclick="@(() => _job.JobRequirements.Add(new JobsDto.JobRequirement()))">Add Requirement</button>
                <ValidationMessage For="@(() => _job.JobRequirements)" />
            </div>
        </div>
    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _job = new JobsDto())">Reset</button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private JobsDto _job = new JobsDto();
    private IBrowserFile? _jobsImage;
    private EditContext _editContext = default!;

    [Parameter, EditorRequired] public Func<JobsDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;
    [Parameter] public JobsDto? Job { get; set; }


    public void ResetForm()
    {
        _job = new JobsDto();
        _editContext = new EditContext(_job);
        _jobsImage = null;
    }

    protected override void OnParametersSet()
    {
        _editContext = new EditContext(_job);
        if (Job != null)
        {
            _job.Id = Job.Id;
            _job.Name = Job.Name;
            _job.Description = Job.Description;
            _job.Location = Job.Location;
            _job.Image = Job.Image;
            _job.ImageAction = ImageAction.None;
            _job.Salary = Job.Salary;
            //_job.TimeInMinutes = Job.TimeInMinutes;
            _job.JobDescriptions.Clear();
            _job.JobDescriptions.AddRange(Job.JobDescriptions.Select(ri => new JobsDto.JobDescription
                {
                    Stage = ri.Stage,
                    Descriptions = ri.Descriptions
                }));
            _job.JobRequirements.Clear();
            _job.JobRequirements.AddRange(Job.JobRequirements.Select(ri => new JobsDto.JobRequirement
                {
                    Stage = ri.Stage,
                    Requirement = ri.Requirement
                }));
        }
    }

    private void LoadJobsImage(InputFileChangeEventArgs e)
    {
        _jobsImage = e.File;
        _job.ImageAction = ImageAction.Add;
    }

    private void RemoveJobsImage()
    {
        _job.Image = null ;
        _job.ImageAction = ImageAction.Remove;
    }

    private async Task SubmitForm() => await OnSubmit(_job, _jobsImage);

}
