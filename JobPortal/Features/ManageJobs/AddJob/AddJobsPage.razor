@page "/add-job"
@inject IMediator Mediator
@*@attribute [Authorize]*@

<PageTitle>Add JobsPortal</PageTitle>


<h3 class="mt-5 mb-4">Add a Job</h3>

@if (_submitSuccessful)
{
    <SuccessAlert Message="Your job has been added successfully!" />
}
else if (_errorMessage is not null)
{
    <ErrorAlert Message="@_errorMessage" />
}

<JobForm @ref="_jobForm" OnSubmit="SubmitNewJob" />

@code {
    private JobForm _jobForm = default!;
    private bool _submitSuccessful;
    private string? _errorMessage;

    private async Task SubmitNewJob(JobsDto jobs, IBrowserFile? image)
    {
        var response = await Mediator.Send(new AddJobRequest(jobs));
        if (response.JobsId == -1)
        {
            _submitSuccessful = false;
            _errorMessage = "There was a problem saving your job.";
            StateHasChanged();
            return;
        }

        if (image is null)
        {
            _submitSuccessful = true;
            _jobForm.ResetForm();
            StateHasChanged();
            return;
        }

        _submitSuccessful = await ProcessImage(response.JobsId, image);

        if (_submitSuccessful)
        {
            _jobForm.ResetForm();
        }

        StateHasChanged();
    }

    private async Task<bool> ProcessImage(int jobsId, IBrowserFile jobsImage)
    {
        var imageUploadResponse = await Mediator.Send(new UploadJobImageRequest(jobsId, jobsImage));

        if (string.IsNullOrWhiteSpace(imageUploadResponse.ImageName))
        {
            _errorMessage = "Your jobs was saved, but there was a problem uploading the image.";
            return false;
        }

        return true;
    }
}