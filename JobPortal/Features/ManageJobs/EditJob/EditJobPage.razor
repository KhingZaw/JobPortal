@page "/edit-job/{JobsId:int}"
@inject IMediator Mediator

<PageTitle>Edit Job - JobPortal</PageTitle>

@if (_isLoading)
{
    <p>Loading job...</p>
}
else
{
    <h3 class="mt-5 mb-4">Editing job: @_job.Name</h3>

    @if (_submitSuccessful)
    {
        <SuccessAlert Message="Your job has been edited successfully!" />
    }
    else if (_errorMessage is not null)
    {
        <ErrorAlert Message="@_errorMessage" />
    }

    <JobForm Job="_job" OnSubmit="SubmitEditJob" />
}

@code {
    private bool _isLoading;
    private bool _submitSuccessful;
    private string? _errorMessage;
    private JobsDto _job = new JobsDto();

    [Parameter] public int JobsId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var response = await Mediator.Send(new GetJobRequest(JobsId));

        if (response.Jobs is not null)
        {
            _job.Id = JobsId;
            _job.Name = response.Jobs.Name;
            _job.FrameworkName = response.Jobs.FrameworkName;
            _job.PLanguage = response.Jobs.PLanguage;
            _job.EmployerName = response.Jobs.EmployerName;
            _job.JobType = response.Jobs.JobType;
            _job.Opento = response.Jobs.Opento;
            _job.Description = response.Jobs.Description;
            _job.Location = response.Jobs.Location;
            _job.Image = response.Jobs.Image;
            _job.Salary = response.Jobs.Salary;
            _job.TimeInMinutes = response.Jobs.TimeInMinutes;
            _job.CreatedDate = response.Jobs.CreatedDate;
            _job.JobDescriptions.AddRange(response.Jobs.JobDescriptions.Select(ri => new JobsDto.JobDescription
                {
                    Stage = ri.Stage,
                    Description = ri.Description
                }));

            _job.JobRequirements.AddRange(response.Jobs.JobRequirements.Select(ri => new JobsDto.JobRequirement
                {
                    Stage = ri.Stage,
                    Requirement = ri.Requirement
                }));
        }
        else
        {
            _errorMessage = "There was a problem loading the job.";
        }

        _isLoading = false;
    }

    private async Task SubmitEditJob(JobsDto job, IBrowserFile? image)
    {
        var response = await Mediator.Send(new EditJobRequest(job));
        if (!response.IsSuccess)
        {
            _submitSuccessful = false;
            _errorMessage = "There was a problem saving your job.";
        }
        else
        {
            _job.Name = job.Name;
            _job.FrameworkName = job.FrameworkName;
            _job.PLanguage = job.PLanguage;
            _job.EmployerName = job.EmployerName;
            _job.JobType = job.JobType;
            _job.Opento = job.Opento;
            _job.Description = job.Description;
            _job.Location = job.Location;
            _job.Salary = job.Salary;
            _job.TimeInMinutes = job.TimeInMinutes;
            _job.CreatedDate = job.CreatedDate;
            _job.JobDescriptions.Clear();
            _job.JobDescriptions.AddRange(job.JobDescriptions.Select(ri => new JobsDto.JobDescription
            {
                Stage = ri.Stage,
                Description = ri.Description
            }));
            _job.JobRequirements.AddRange(job.JobRequirements.Select(ri => new JobsDto.JobRequirement

                {
                    Stage = ri.Stage,
                    Requirement = ri.Requirement
                }));

            _submitSuccessful = true;

            if (job.ImageAction == ImageAction.Add) _submitSuccessful = await ProcessImage(job.Id, image!);
            if (job.ImageAction == ImageAction.Remove) _job.Image = null;
        }

        StateHasChanged();
    }

    private async Task<bool> ProcessImage(int jobsId, IBrowserFile jobsImage)
    {
        var imageUploadResponse = await Mediator.Send(new UploadJobImageRequest(jobsId, jobsImage));

        if (string.IsNullOrWhiteSpace(imageUploadResponse.ImageName))
        {
            _errorMessage = "Your job was saved, but there was a problem uploading the image.";
            return false;
        }

        _job.Image = imageUploadResponse.ImageName;
        return true;
    }
}
