@page "/detail/{JobsId:int}"
@inject IMediator Mediator

@if (_isLoading)
{
    <p>Loading job...</p>
}
else
{
    <h3 class="mt-5 mb-4">@_job.Name</h3>

    <img src="@(!string.IsNullOrWhiteSpace(_job.Image) ? $"images/{_job.Image}" : "https://via.placeholder.com/640x426.jpg?text=No+Image+For+Job")" />

    <h6 class="mb-3 text-muted"><span class="oi oi-map-marker"></span> @_job.Location</h6>

    <div class="mt-4">
        <p> <i class="bi bi-calendar"> </i> @_job.CreatedDate </p>
        @*<p> <i class="bi bi-clock"> </i> @_job.Released &nbsp </p>*@
        <p><i class="bi bi-currency-dollar"> </i> @_job.Salary </p>
    </div>

    @if (_errorMessage is not null)
    {
        <ErrorAlert Message="@_errorMessage" />
    }

    <h3>Job Description</h3>

    @foreach (var jobDescriptions in _job.JobDescriptions)
    {
        <ul>
            <li>@jobDescriptions.Description</li>
        </ul>
    }

    <h3>Job Requirement</h3>

    @foreach (var jobRequirements in _job.JobRequirements)
    {
        <ul>
            <li>@jobRequirements.Requirement</li>
        </ul>
    }
}
@code {

    private bool _isLoading;
    private string? _errorMessage;
    private JobsDto _job = new JobsDto();

    [Parameter] public int JobsId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        var response = await Mediator.Send(new GetJobRequest(JobsId));

        if (response.Jobs is not null)
        {
            _job.Id = JobsId;
            _job.Name = response.Jobs.Name;
            _job.FrameworkName = response.Jobs.FrameworkName;
            _job.PLanguage = response.Jobs.PLanguage;
            _job.EmployerName = response.Jobs.EmployerName;
            _job.JobType = response.Jobs.JobType;
            _job.Opento = response.Jobs.Opento;
            _job.Description = response.Jobs.Description;
            _job.Location = response.Jobs.Location;
            _job.Image = response.Jobs.Image;
            _job.Salary = response.Jobs.Salary;
            _job.CreatedDate = response.Jobs.CreatedDate;
            _job.JobDescriptions.AddRange(response.Jobs.JobDescriptions.Select(ri => new JobsDto.JobDescription
                {
                    Stage = ri.Stage,
                    Description = ri.Description
                }));

            _job.JobRequirements.AddRange(response.Jobs.JobRequirements.Select(ri => new JobsDto.JobRequirement
                {
                    Stage = ri.Stage,
                    Requirement = ri.Requirement
                }));
        }
        else
        {
            _errorMessage = "There was a problem loading the job.";
        }

        _isLoading = false;
    }
    
}