@page "/detail/{id:int}"
@inject HttpClient Http

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
    </ol>
</nav>

@if (_selectedJob is not null)
{
@*<div class="drawer-content">
 <div class="job-details">*@
<h3>@_selectedJob.Name</h3>
<h6 class="mb-3 text-muted"><span class="oi oi-map-marker"></span> @_selectedJob.Location</h6>
<div class="mt-4">
    <p> <i class="bi bi-calendar"> </i> @_selectedJob.CreatedDate </p>
    <p> <i class="bi bi-clock"> </i> @_selectedJob.CreatedTime &nbsp </p>
    @*<p><i class="bi bi-currency-dollar"> </i> @_selectedJob.Salary </p>*@
</div>
}

@if ( _jobdescs == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="descriptions-container">
        <h3>Job Descriptions</h3>
        <ul>
       @foreach (var jobdesc in _jobdescs)
         {
            <li>@jobdesc.description</li>    
         }
        </ul>
    </div>
}


@if ( _jobreqs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="descriptions-container">
        <h3>Job Requirements</h3>
        <ul>
        @foreach (var jobreq in _jobreqs)
        {
            <li>@jobreq.requirement</li>
        }
        </ul>
    </div>
}


@code {

    [Parameter] public int Id { get; set;}

    private Jobs? _selectedJob;

    private IEnumerable<JobDescription>? _jobdescs;


    private IEnumerable<JobRequirement>? _jobreqs;



    protected override async Task OnInitializedAsync()
    {
        try
        {
           var _jobs = await Http.GetFromJsonAsync<IEnumerable<Jobs>>("jobs/jobs_data.json");

            _selectedJob = _jobs!.Where(x => x.Id == Id).First();

            _jobdescs = _selectedJob.JobDescriptions;
            _jobreqs = _selectedJob.JobRequirements;

            
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading job data: {ex.Message}");
        }
    }
}